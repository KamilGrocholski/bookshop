// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id          BigInt  @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?

  books Book[]
}

model Category {
  id   BigInt @id @default(autoincrement())
  name String @unique

  books Book[]
}

model Publisher {
  id   BigInt @id @default(autoincrement())
  name String

  books Book[]
}

enum OrderStatus {
  PENDING
  SHIPPING
  DELIVERED
}

model OrderItem {
  id         BigInt @id @default(autoincrement())
  quantity   Int
  totalPrice Float

  order   Order  @relation(fields: [orderId], references: [id])
  orderId BigInt
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  BigInt
}

model Order {
  id         BigInt      @id @default(autoincrement())
  totalPrice Float
  status     OrderStatus

  items  OrderItem[]
  user   User        @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model Book {
  id            BigInt   @id @default(autoincrement())
  title         String
  description   String
  stock         Int      @default(0)
  price         Float
  publishedAt   DateTime
  pages         Int
  coverImageUrl String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  authors     Author[]
  categories  Category[]
  orderItems  OrderItem[]
  publisher   Publisher   @relation(fields: [publisherId], references: [id])
  publisherId BigInt

  @@index([id])
  @@index([title])
}
